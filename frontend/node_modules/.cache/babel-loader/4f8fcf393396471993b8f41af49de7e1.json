{"remainingRequest":"/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/node_modules/babel-loader/lib/index.js!/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/node_modules/eslint-loader/index.js??ref--14-0!/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/src/store/modules/todos.js","dependencies":[{"path":"/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/src/store/modules/todos.js","mtime":1644201670876},{"path":"/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/babel.config.js","mtime":1644164563309},{"path":"/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1642363664053},{"path":"/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/node_modules/babel-loader/lib/index.js","mtime":1635366437722},{"path":"/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/node_modules/eslint-loader/index.js","mtime":1644164227752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9nZW9yZ2VsdWdvL0Rlc2t0b3AvcmFpbHNfdnVlL3Z1ZV9hcHAvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKdmFyIGFwaV91cmwgPSAiaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS92MS90b2RvcyI7CnZhciBzdGF0ZSA9IHsKICB0b2RvczogW10KfTsKdmFyIGdldHRlcnMgPSB7CiAgYWxsVG9kb3M6IGZ1bmN0aW9uIGFsbFRvZG9zKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUudG9kb3M7CiAgfQp9Owp2YXIgYWN0aW9ucyA9IHsKICBmZXRjaFRvZG9zOiBmdW5jdGlvbiBmZXRjaFRvZG9zKF9yZWYpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBjb21taXQsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChhcGlfdXJsKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgY29tbWl0KCdzZXRUb2RvcycsIHJlc3BvbnNlLmRhdGEpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCiAgYWRkVG9kbzogZnVuY3Rpb24gYWRkVG9kbyhfcmVmMiwgdGl0bGUpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgY29tbWl0LCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMi5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KGFwaV91cmwsIHsKICAgICAgICAgICAgICAgIHRvZG86IHsKICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgICAgICAgICAgICBjb21wbGV0ZWQ6IGZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBjb21taXQoJ25ld1RvZG8nLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSgpOwogIH0sCiAgZGVsZXRlVG9kbzogZnVuY3Rpb24gZGVsZXRlVG9kbyhfcmVmMywgaWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICB2YXIgY29tbWl0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmRlbGV0ZShhcGlfdXJsICsgIi8iLmNvbmNhdChpZCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNvbW1pdCgncmVtb3ZlVG9kbycsIGlkKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKSgpOwogIH0sCiAgdXBkYXRlVG9kbzogZnVuY3Rpb24gdXBkYXRlVG9kbyhfcmVmNCwgdXBkYXRlZFRvZG8pIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICB2YXIgY29tbWl0LCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNC5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wdXQoYXBpX3VybCArICIvIi5jb25jYXQodXBkYXRlZFRvZG8uaWQpLCB1cGRhdGVkVG9kbyk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICBjb21taXQoJ3NldFVwZGF0ZWRUb2RvJywgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNCk7CiAgICB9KSkoKTsKICB9Cn07CnZhciBtdXRhdGlvbnMgPSB7CiAgc2V0VG9kb3M6IGZ1bmN0aW9uIHNldFRvZG9zKHN0YXRlLCB0b2RvcykgewogICAgcmV0dXJuIHN0YXRlLnRvZG9zID0gdG9kb3M7CiAgfSwKICBuZXdUb2RvOiBmdW5jdGlvbiBuZXdUb2RvKHN0YXRlLCB0b2RvKSB7CiAgICByZXR1cm4gc3RhdGUudG9kb3MudW5zaGlmdCh0b2RvKTsKICB9LAogIHJlbW92ZVRvZG86IGZ1bmN0aW9uIHJlbW92ZVRvZG8oc3RhdGUsIGlkKSB7CiAgICByZXR1cm4gc3RhdGUudG9kb3MgPSBzdGF0ZS50b2Rvcy5maWx0ZXIoZnVuY3Rpb24gKHRvZG8pIHsKICAgICAgcmV0dXJuIHRvZG8uaWQgIT09IGlkOwogICAgfSk7CiAgfSwKICBzZXRVcGRhdGVkVG9kbzogZnVuY3Rpb24gc2V0VXBkYXRlZFRvZG8oc3RhdGUsIHVwZGF0ZWRUb2RvKSB7CiAgICB2YXIgaW5kZXggPSBzdGF0ZS50b2Rvcy5maW5kSW5kZXgoZnVuY3Rpb24gKHRvZG8pIHsKICAgICAgcmV0dXJuIHRvZG8uaWQgPT09IHVwZGF0ZWRUb2RvLmlkOwogICAgfSk7CgogICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICBzdGF0ZS50b2Rvcy5zcGxpY2UoaW5kZXgsIDEsIHVwZGF0ZWRUb2RvKTsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgZ2V0dGVyczogZ2V0dGVycywKICBhY3Rpb25zOiBhY3Rpb25zLAogIG11dGF0aW9uczogbXV0YXRpb25zCn07"},{"version":3,"sources":["/Users/georgelugo/Desktop/rails_vue/vue_app/frontend/src/store/modules/todos.js"],"names":["axios","api_url","state","todos","getters","allTodos","actions","fetchTodos","commit","get","response","data","addTodo","title","post","todo","completed","deleteTodo","id","delete","updateTodo","updatedTodo","put","mutations","setTodos","newTodo","unshift","removeTodo","filter","setUpdatedTodo","index","findIndex","splice"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst api_url = \"http://localhost:3000/api/v1/todos\";\n\nconst state = {\n    todos: []\n};\n\nconst getters = {\n    allTodos: (state) => state.todos\n};\n\nconst actions = {\n    async fetchTodos({ commit }) {\n        const response = await axios.get(api_url);\n        commit('setTodos', response.data);\n    },\n    async addTodo({ commit }, title) {\n        const response = await axios.post(api_url,\n            {\n                todo: {\n                    title,\n                    completed: false\n                }\n            });\n        commit('newTodo', response.data);\n    },\n    async deleteTodo({ commit }, id) {\n        await axios.delete(api_url + `/${id}`);\n        commit('removeTodo', id);\n    },\n    async updateTodo({ commit }, updatedTodo) {\n        const response = await axios.put(api_url + `/${updatedTodo.id}`, updatedTodo);\n        commit('setUpdatedTodo', response.data);\n    }\n};\n\nconst mutations = {\n    setTodos: (state, todos) => (state.todos = todos),\n    newTodo: (state, todo) => (state.todos.unshift(todo)),\n    removeTodo: (state, id) => \n        (state.todos = state.todos.filter(todo => todo.id !== id)),\n    setUpdatedTodo: (state, updatedTodo) => {\n        const index = state.todos.findIndex(todo => todo.id === updatedTodo.id);\n        if (index !== -1) {\n            state.todos.splice(index, 1, updatedTodo)\n        }\n    }\n};\n\nexport default {\n    state, \n    getters,\n    actions,\n    mutations\n}"]}]}